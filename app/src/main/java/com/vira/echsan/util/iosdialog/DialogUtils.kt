package com.vira.echsan.util.iosdialog

import android.content.Context
import android.graphics.PorterDuff
import android.graphics.drawable.AnimationDrawable
import android.graphics.drawable.Drawable
import android.os.Build
import android.support.annotation.AttrRes
import android.support.annotation.ColorInt
import android.support.annotation.ColorRes
import android.support.v4.content.ContextCompat
import com.vira.echsan.R
import java.util.*

object DialogUtils {

    private lateinit var petals: List<Drawable>
    private val PETALS_COUNT = 12

    private val DEFAULT_DURATION = 60

    /**
     * Returns a color associated with a particular resource ID
     *
     *
     * Starting in [Build.VERSION_CODES.M], the returned
     * color will be styled for the specified Context's theme.
     *
     * @param context Current application context
     * @param colorId The desired resource identifier, as generated by the aapt tool. This integer
     * encodes the package, type, and resource entry. The value 0 is an invalid identifier.
     * @return A single color value in the form 0xAARRGGBB.
     */
    @ColorInt
    fun getColor(context: Context, @ColorRes colorId: Int): Int {
        return ContextCompat.getColor(context, colorId)
    }

    @ColorInt
    @JvmOverloads
    fun resolveColor(context: Context, @AttrRes attr: Int, fallback: Int = 0): Int {
        val a = context.theme.obtainStyledAttributes(intArrayOf(attr))
        try {
            return a.getColor(0, fallback)
        } finally {
            a.recycle()
        }
    }

    fun createAnimation(context: Context): AnimationDrawable {
        return ContextCompat.getDrawable(context, R.drawable.spinner) as AnimationDrawable
    }

    @JvmOverloads
    fun createAnimation(
        context: Context, @ColorInt color: Int,
        duration: Int = DEFAULT_DURATION,
        clockwise: Boolean = true
    ): AnimationDrawable {
        if (petals == null) {
            petals = ArrayList(PETALS_COUNT)
            val dr0 = ContextCompat.getDrawable(context, R.drawable.spinner_0)
            val dr1 = ContextCompat.getDrawable(context, R.drawable.spinner_1)
            val dr2 = ContextCompat.getDrawable(context, R.drawable.spinner_2)
            val dr3 = ContextCompat.getDrawable(context, R.drawable.spinner_3)
            val dr4 = ContextCompat.getDrawable(context, R.drawable.spinner_4)
            val dr5 = ContextCompat.getDrawable(context, R.drawable.spinner_5)
            val dr6 = ContextCompat.getDrawable(context, R.drawable.spinner_6)
            val dr7 = ContextCompat.getDrawable(context, R.drawable.spinner_7)
            val dr8 = ContextCompat.getDrawable(context, R.drawable.spinner_8)
            val dr9 = ContextCompat.getDrawable(context, R.drawable.spinner_9)
            val dr10 = ContextCompat.getDrawable(context, R.drawable.spinner_10)
            val dr11 = ContextCompat.getDrawable(context, R.drawable.spinner_11)
            Collections.addAll<Drawable>(
                petals as ArrayList<Drawable>, dr0, dr1, dr2, dr3, dr4, dr5, dr6, dr7, dr8, dr9, dr10, dr11
            )
        }
        val animation = AnimationDrawable()
        val drawables = ArrayList<Drawable>(PETALS_COUNT)
        for (drawable in petals) {
            val drwNewCopy = drawable.constantState!!.newDrawable().mutate()
            drwNewCopy.setColorFilter(color, PorterDuff.Mode.MULTIPLY)
            drawables.add(drwNewCopy)
        }
        if (!clockwise) {
            Collections.reverse(drawables)
        }
        for (drawable in drawables) {
            animation.addFrame(drawable, duration)
        }
        return animation
    }

}